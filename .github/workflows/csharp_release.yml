name: Publish Release To NuGet

on:
  release:
    types: [ published ] # Trigger on published pre-releases and releases

jobs:
  variables:
    name: Set Variables
    runs-on: ubuntu-latest
    env:
      # ⚠️ IMPORTANT: tag should always start with integer & will be used verbatim to string end
      TAG: ${{ github.event.release.tag_name }}
    steps:
      - name: Set semantic version variable
        id: set_version
        run: |
          TAG=${{ env.TAG }}
          SEMANTIC_VERSION=$(echo "${TAG}" | grep -Po "(?<=^|[^0-9])([0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?(-[a-zA-Z]+[0-9]*)?)")
          if [ -z "${SEMANTIC_VERSION}" ]; then
            echo "Tag did not start with a semantic version number (e.g., #.#.#; #.#.#.#; #.#.#.#-beta)"
            exit 1
          fi
          echo "semantic_version=${SEMANTIC_VERSION}" >> $GITHUB_OUTPUT
      - name: Output tag & semantic version
        id: outputs
        run: |
          echo ${{ env.TAG }}
          echo ${{ steps.set_version.outputs.semantic_version }}
    outputs:
      tag: ${{ env.TAG }}
      semanticVersion: ${{ steps.set_version.outputs.semantic_version }}
  
  buildFrameworkVersions:
    name: Build Framework versions
    needs: variables 
    runs-on: windows-2019 # required version for Framework 4.0
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.variables.outputs.tag }}
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
      - name: Restore NuGet packages
        run: nuget restore ./OptimizelySDK.NETFramework.sln
      - name: Build and strongly name assemblies
        run: msbuild /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$(pwd)/keypair.snk /p:Configuration=Release ./OptimizelySDK.NETFramework.sln
      - name: Upload Framework artifacts
        uses: actions/upload-artifact@v2
        with:
          name: unsigned-dlls
          if-no-files-found: error
          path: ./**/bin/Release/**/Optimizely*.dll

  buildStandard16:
    name: Build Standard 1.6 version
    needs: variables
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.variables.outputs.tag }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - name: Restore dependencies
        run: dotnet restore OptimizelySDK.NetStandard16/OptimizelySDK.NetStandard16.csproj
      - name: Build and strongly name assemblies
        run: dotnet build OptimizelySDK.NetStandard16/OptimizelySDK.NetStandard16.csproj /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$(pwd)/keypair.snk -c Release
      - name: Upload Standard 1.6 artifact
        uses: actions/upload-artifact@v2
        with:
          name: unsigned-dlls
          if-no-files-found: error
          path: ./**/bin/Release/**/Optimizely*.dll

  buildStandard20:
    name: Build Standard 2.0 version
    needs: variables
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.variables.outputs.tag }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
      - name: Restore dependencies
        run: dotnet restore OptimizelySDK.NetStandard20/OptimizelySDK.NetStandard20.csproj
      - name: Build and strongly name Standard 2.0 project
        run: dotnet build OptimizelySDK.NetStandard20/OptimizelySDK.NetStandard20.csproj /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$(pwd)/keypair.snk -c Release
      - name: Build and strongly name assemblies
        uses: actions/upload-artifact@v2
        with:
          name: unsigned-dlls
          if-no-files-found: error
          path: ./**/bin/Release/**/Optimizely*.dll
  
  sign:
    name: Send DLLs for signing
    needs: [ variables, buildFrameworkVersions, buildStandard16, buildStandard20 ]
    runs-on: ubuntu-latest
    steps:
      - name: Download the unsigned files
        uses: actions/download-artifact@v2
        with:
          name: unsigned-dlls
          if-no-files-found: error
          path: ./unsigned-dlls
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SIGNING_SERVER_SSH_PRIVATE_KEY }}
      - name: Send files to signing server
        run: scp -r ./unsigned-dlls ${{ secrets.SIGNING_SERVER_URI }}:/path/to/signing/directory  # TODO: Replace with actual path
      - name: Wait for artifact to be published
        run: |
          # TODO: Replace with actual path
          while [ ! -f /path/to/signed/dlls ]; do
            sleep 10
          done
      - name: Download signed files
        # TODO: Replace with actual path
        run: scp -r ${{ secrets.SIGNING_SERVER_URI }}:/path/to/signed/dlls ./signed-dlls
      - name: Delete signed files from server
        # TODO: Replace with actual path
        run: ssh ${{ secrets.SIGNING_SERVER_URI }} "rm -rf /path/to/signed/dlls"
      - name: Upload signed files
        uses: actions/upload-artifact@v2
        with:
          name: signed-dlls
          if-no-files-found: error

  pack:
    name: Pack NuGet package
    needs: [variables, sign]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.variables.outputs.semanticVersion }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.variables.outputs.tag }}
      - name: Install mono
        run: |
          sudo apt update
          sudo apt install -y mono-devel
      - name: Download NuGet files
        uses: actions/download-artifact@v2
        with:
          name: signed-dlls
          path: ./signed-dlls
      - name: Organize files
        run: |
          pushd ./signed-files
          # Move all dlls to the root directory
          find . -type f -name "*.dll" -exec mv {} . \;
          popd
          # Create directories
          mkdir -p nuget/lib/net35/ nuget/lib/net40/ nuget/lib/net45/ nuget/lib/netstandard1.6/ nuget/lib/netstandard2.0/
          pushd ./nuget
          # Move files to directories
          mv ../signed-dlls/OptimizelySDK.Net35.dll lib/net35/
          mv ../signed-dlls/OptimizelySDK.Net40.dll lib/net40/
          mv ../signed-dlls/OptimizelySDK.dll lib/net45/
          mv ../signed-dlls/OptimizelySDK.NetStandard16.dll lib/netstandard1.6/
          mv ../signed-dlls/OptimizelySDK.NetStandard20.dll lib/netstandard2.0/
          popd
      - name: Create nuspec
        # Uses env.VERSION in OptimizelySDK.nuspec.template
        run: |
          chmod +x ./OptimizelySDK.nuspec.template
          ./OptimizelySDK.nuspec.template
      - name: Pack NuGet package
        run: |
          pushd ./nuget
          nuget pack OptimizelySDK.nuspec
          popd
      - name: Upload nupkg artifact
        uses: actions/upload-artifact@v2
        with:
          name: nuget-package
          if-no-files-found: error
          path: ./nuget/Optimizely.SDK.${{ env.VERSION }}.nupkg

  publish:
    name: Publish package to NuGet
    needs: [ variables, pack ]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.variables.outputs.semanticVersion }}
    steps:
      - name: Download NuGet files
        uses: actions/download-artifact@v2
        with:
          name: nuget-package
          path: ./nuget
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
      - name: Publish NuGet package
        # Unset secrets.NUGET_API_KEY to simulate dry run
        run: |
          dotnet nuget push ./nuget/Optimizely.SDK.${{ env.VERSION }}.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}
