---
name: Csharp CI with .NET

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    
env:
  RELEASE_BRANCH: "master"

jobs:
  lint_code_base:
    runs-on: ubuntu-latest
    name: Lint Codebase
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files
          fetch-depth: 0
      - name: Lint codebase
        uses: github/super-linter@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          VALIDATE_CSHARP: true
          VALIDATE_MARKDOWN: true

  integration_tests:
    name: Run Integration Tests
    uses: optimizely/csharp-sdk/.github/workflows/integration_test.yml@master
    secrets:
      CI_USER_TOKEN: ${{ secrets.CI_USER_TOKEN }}
      TRAVIS_COM_TOKEN: ${{ secrets.TRAVIS_COM_TOKEN }}
      
  fullstack_production_suite:
    name: Run Full Stack Compatibility Suite
    uses: optimizely/csharp-sdk/.github/workflows/integration_test.yml@master
    with:
      FULLSTACK_TEST_REPO: ProdTesting
    secrets:
      CI_USER_TOKEN: ${{ secrets.CI_USER_TOKEN }}
      TRAVIS_COM_TOKEN: ${{ secrets.TRAVIS_COM_TOKEN }}

  unit_test:
    name: Run Unit Tests
    runs-on: windows-2019
    env:
      REPO_SLUG: ${{ github.repository }}
      BUILD_NUMBER: ${{ github.run_id }}
      ATTEMPT_NUM: ${{ github.run_attempt }}
      RUN_NUMBER: ${{ github.run_number }}
      EVENT_TYPE: ${{ github.event_name }}
      CURRENT_BRANCH: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1
      - name: Build solution
        run: msbuild /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$(pwd)/keypair.snk /p:Configuration=Release ./OptimizelySDK.Travis.sln
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
      - name: Install NUnit.ConsoleRunner
        run: nuget install NUnit.ConsoleRunner -Version 3.15.2 -DirectDownload -OutputDirectory .
      - name: Run NUnit tests
        run: ./NUnit.ConsoleRunner.3.15.2/tools/nunit3-console.exe ./OptimizelySDK.Tests/bin/Release/OptimizelySDK.Tests.dll
      - name: Find and sign all DLLs
        run: |
          sudo find . -path './OptimizelySDK*bin/Release/OptimizelySDK*.dll' -not -regex '.*Tests.*' -print0 | while IFS= read -r -d '' file; do sn -R $file ./keypair.snk; done
      - name: Check on success
        if: steps.unit_tests.outcome == 'success' && env.CURRENT_BRANCH == env.RELEASE_BRANCH && env.EVENT_TYPE == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OFTA_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OFTA_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.OFTA_REGION }}
        run: |
          find . -path './OptimizelySDK*bin/Release/OptimizelySDK*.dll' -not -regex '.*Tests.*' -print0 | while IFS= read -r -d '' file; do (aws s3 cp $file s3://optly-fs-travisci-artifacts/${{ env.REPO_SLUG }}/${{ env.BUILD_NUMBER }}/${{ env.RUN_NUMBER }}/${{ env.ATTEMPT_NUM }}/$(basename $file)-unsigned); done

  netStandard16:
    name: Build For .NET Standard 1.6 
    runs-on: windows-2022
    env:
      REPO_SLUG: ${{ github.repository }}
      BUILD_NUMBER: ${{ github.run_id }}
      ATTEMPT_NUM: ${{ github.run_attempt }}
      RUN_NUMBER: ${{ github.run_number }}
      EVENT_TYPE: ${{ github.event_name }}
      CURRENT_BRANCH: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 3.1.x
      - name: Restore dependencies
        run: dotnet restore OptimizelySDK.NetStandard16/OptimizelySDK.NetStandard16.csproj
      - name: Build
        id: netStandard16_build
        run: |
          # strongname signing is taken care of in build step
          dotnet build OptimizelySDK.NetStandard16/OptimizelySDK.NetStandard16.csproj /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=D:\a\csharp-sdk\csharp-sdk\keypair.snk -c Release
          # TODO: no dotnet test yet for NetStandard16
      - name: Check on success
        if: steps.netStandard16_build.outcome == 'success' && env.CURRENT_BRANCH == env.RELEASE_BRANCH && env.EVENT_TYPE == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OFTA_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OFTA_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.OFTA_REGION }}
        run: |
          (aws s3 cp ./OptimizelySDK.NetStandard16/bin/Release/netstandard1.6/OptimizelySDK.NetStandard16.dll s3://optly-fs-travisci-artifacts/${{ env.REPO_SLUG }}/${{ env.BUILD_NUMBER }}/${{ env.RUN_NUMBER }}/${{ env.ATTEMPT_NUM }}/OptimizelySDK.NetStandard16.dll-unsigned)

  netStandard20:
    name: Build For .NET Standard 2.0
    runs-on: windows-2022
    env:
      REPO_SLUG: ${{ github.repository }}
      BUILD_NUMBER: ${{ github.run_id }}
      ATTEMPT_NUM: ${{ github.run_attempt }}
      RUN_NUMBER: ${{ github.run_number }}
      EVENT_TYPE: ${{ github.event_name }}
      CURRENT_BRANCH: ${{ github.head_ref || github.ref_name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: 3.1.x
      - name: Restore dependencies
        run: dotnet restore OptimizelySDK.NetStandard20/OptimizelySDK.NetStandard20.csproj
      - name: Build
        id: netStandard20_build
        run: |
          # strongname signing is taken care of in build step
          dotnet build OptimizelySDK.NetStandard20/OptimizelySDK.NetStandard20.csproj /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=D:\a\csharp-sdk\csharp-sdk\keypair.snk -c Release
          # TODO: no dotnet test yet for NetStandard20
      - name: Check on success
        if: steps.netStandard20_build.outcome == 'success' && env.CURRENT_BRANCH == env.RELEASE_BRANCH && env.EVENT_TYPE == 'push'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.OFTA_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.OFTA_SECRET }}
          AWS_DEFAULT_REGION: ${{ secrets.OFTA_REGION }}
        run: |
          (aws s3 cp ./OptimizelySDK.NetStandard20/bin/Release/netstandard2.0/OptimizelySDK.NetStandard20.dll s3://optly-fs-travisci-artifacts/${{ env.REPO_SLUG }}/${{ env.BUILD_NUMBER }}/${{ env.RUN_NUMBER }}/${{ env.ATTEMPT_NUM }}/OptimizelySDK.NetStandard20.dll-unsigned)
