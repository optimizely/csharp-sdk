language: minimal

env:
  global:
    RELEASE_BRANCH: "3.2.x"

# Integration tests need to run first to reset the PR build status to pending
stages:
  - name: 'Lint markdown files'
  - name: 'Integration tests'
  - name: 'Benchmarking tests'
  - name: 'Unit Tests'
  - name: 'NetStandard16'

jobs:
  include:
    - stage: 'Lint markdown files'
      language: ruby
      rvm: 2.4.1
      os: linux
      install: gem install awesome_bot
      script:
        - find . -type f -name '*.md' -exec awesome_bot {} \;
      notifications:
        email: false
    - &integrationtest
      stage: 'Integration tests'
      env: SDK=csharp SDK_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH
      cache: false
      language: minimal
      before_install: skip
      install: skip
      before_script:
        - mkdir $HOME/travisci-tools && pushd $HOME/travisci-tools && git init && git pull https://$CI_USER_TOKEN@github.com/optimizely/travisci-tools.git && popd
      script:
        - $HOME/travisci-tools/trigger-script-with-status-update.sh
      after_success: travis_terminate 0
    - <<: *integrationtest
      stage: 'Benchmarking tests'
      env: SDK=csharp FULLSTACK_TEST_REPO=Benchmarking SDK_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH

    - stage: 'Unit Tests'
      language: csharp
      dist: xenial
      mono: 5.2.0
      solution: "./OptimizelySDK.Travis.sln"
      install:
        - nuget restore ./OptimizelySDK.Travis.sln
        - nuget install ./OptimizelySDK.Tests/packages.config -OutputDirectory ./packages
        - nuget install NUnit.Runners -Version 2.6.4 -OutputDirectory ./testrunner
      script:
        - xbuild /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$TRAVIS_BUILD_DIR/keypair.snk /p:Configuration=Release ./OptimizelySDK.Travis.sln
        - mono ./testrunner/NUnit.Runners.2.6.4/tools/nunit-console.exe ./OptimizelySDK.Tests/bin/Release/OptimizelySDK.Tests.dll
        # strongname signing from xbuild step needs additional re-signing with sn
        - find . -path './OptimizelySDK*bin/Release/OptimizelySDK*.dll' -not -regex '.*Tests.*' -print0 | while IFS= read -r -d '' file; do sn -R $file ./keypair.snk; done
      after_success:
        - pip install --user awscli
        # upload dll build artifacts to s3 with -unsigned suffix
        - ([ ${TRAVIS_BRANCH} = "$RELEASE_BRANCH" ] && [ ${TRAVIS_EVENT_TYPE} = "push" ]) && find . -path './OptimizelySDK*bin/Release/OptimizelySDK*.dll' -not -regex '.*Tests.*' -print0 | while IFS= read -r -d '' file; do (AWS_ACCESS_KEY_ID=$OFTA_KEY AWS_SECRET_ACCESS_KEY=$OFTA_SECRET AWS_DEFAULT_REGION=$OFTA_REGION aws s3 cp $file s3://optly-fs-travisci-artifacts/${TRAVIS_REPO_SLUG}/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/$(basename $file)-unsigned); done

    - stage: 'NetStandard16'
      language: csharp
      # dotnet only works on trusty https://github.com/travis-ci/travis-ci/issues/5189
      dist: trusty
      mono: none
      dotnet: 2.1.502
      install:
        - dotnet restore OptimizelySDK.NetStandard16/OptimizelySDK.NetStandard16.csproj
      addons:
        srcclr: true
      script:
        # strongname signing is taken care of in build step
        - dotnet build OptimizelySDK.NetStandard16/OptimizelySDK.NetStandard16.csproj /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$TRAVIS_BUILD_DIR/keypair.snk -c Release
        # TODO: no dotnet test yet for NetStandard16
      after_success:
        - pip install --user awscli
        # upload dll build artifacts to s3 with -unsigned suffix
        - ([ ${TRAVIS_BRANCH} = "$RELEASE_BRANCH" ] && [ ${TRAVIS_EVENT_TYPE} = "push" ]) && (AWS_ACCESS_KEY_ID=$OFTA_KEY AWS_SECRET_ACCESS_KEY=$OFTA_SECRET AWS_DEFAULT_REGION=$OFTA_REGION aws s3 cp ./OptimizelySDK.NetStandard16/bin/Release/netstandard1.6/OptimizelySDK.NetStandard16.dll s3://optly-fs-travisci-artifacts/${TRAVIS_REPO_SLUG}/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/OptimizelySDK.NetStandard16.dll-unsigned)

    - stage: 'NetStandard20'
      language: csharp
      # dotnet only works on trusty https://github.com/travis-ci/travis-ci/issues/5189
      dist: trusty
      mono: none
      dotnet: 2.1.502
      install:
        - dotnet restore OptimizelySDK.NetStandard20/OptimizelySDK.NetStandard20.csproj
      addons:
        srcclr: true
      script:
        # strongname signing is taken care of in build step
        - dotnet build OptimizelySDK.NetStandard20/OptimizelySDK.NetStandard20.csproj /p:SignAssembly=true /p:AssemblyOriginatorKeyFile=$TRAVIS_BUILD_DIR/keypair.snk -c Release
        # TODO: no dotnet test yet for NetStandard16
      after_success:
        - pip install --user awscli
        # upload dll build artifacts to s3 with -unsigned suffix
        - ([ ${TRAVIS_BRANCH} = "$RELEASE_BRANCH" ] && [ ${TRAVIS_EVENT_TYPE} = "push" ]) && (AWS_ACCESS_KEY_ID=$OFTA_KEY AWS_SECRET_ACCESS_KEY=$OFTA_SECRET AWS_DEFAULT_REGION=$OFTA_REGION aws s3 cp ./OptimizelySDK.NetStandard20/bin/Release/netstandard2.0/OptimizelySDK.NetStandard20.dll s3://optly-fs-travisci-artifacts/${TRAVIS_REPO_SLUG}/${TRAVIS_BUILD_NUMBER}/${TRAVIS_JOB_NUMBER}/OptimizelySDK.NetStandard20.dll-unsigned)        
